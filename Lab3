// Universidad del Valle
// Digital 2
// Ana y Dayrin
// Contador binario con leds e interrupciones

// Librerías
#include <Arduino.h>
#include <stdint.h>

portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

// Variables globales
int count = 0;
#define Led_1 23
#define Led_2 22
#define Led_3 21
#define Led_4 19
#define Led_5 13
#define Led_6 12
#define Led_7 27
#define Led_8 26
#define reinicio 33

// se configura timer
hw_timer_t *timer = NULL;

volatile int sequenceIndex = 0;

// se define función para temporizador
void IRAM_ATTR Temporizador() {

// Secuencia de estados de los LEDs
  int sequence[16][4] = {
    {LOW, LOW, LOW, LOW},
    {LOW, LOW, LOW, HIGH},
    {LOW, LOW, HIGH, LOW},
    {LOW, LOW, HIGH, HIGH},
    {LOW, HIGH, LOW, LOW},
    {LOW, HIGH, LOW, HIGH},
    {LOW, HIGH, HIGH, LOW},
    {LOW, HIGH, HIGH, HIGH},
    {HIGH, LOW, LOW, LOW},
    {HIGH, LOW, LOW, HIGH},
    {HIGH, LOW, HIGH, LOW},
    {HIGH, LOW, HIGH, HIGH},
    {HIGH, HIGH, LOW, LOW},
    {HIGH, HIGH, LOW, HIGH},
    {HIGH, HIGH, HIGH, LOW},
    {HIGH, HIGH, HIGH, HIGH}
  };

// Cambio de estado de los LEDs según el índice actual de la secuencia
  digitalWrite(Led_5, sequence[sequenceIndex][0]);
  digitalWrite(Led_6, sequence[sequenceIndex][1]);
  digitalWrite(Led_7, sequence[sequenceIndex][2]);
  digitalWrite(Led_8, sequence[sequenceIndex][3]);

  // Incrementa el índice de la secuencia
  sequenceIndex = (sequenceIndex + 1) % 16;
}

// Prototipos de funciones
void mostrarBinario(uint8_t numero);

// Se define una estructura para los botones
struct Button {
  const uint8_t PIN;
  bool pressed;
};

// Se definen los botones
Button MAS = {4,false};
Button MENOS = {5,false};

// Se definen las ISR
void IRAM_ATTR mas_isr() {
  portENTER_CRITICAL_ISR(&mux);
    count = (count + 1) % 16;
    MAS.pressed = true;                             
    mostrarBinario(count);
  portEXIT_CRITICAL_ISR(&mux);
}

void IRAM_ATTR menos_isr() {
  portENTER_CRITICAL_ISR(&mux);
    count = (count - 1) % 16;;
    MENOS.pressed = true;
    mostrarBinario(count);
  portEXIT_CRITICAL_ISR(&mux);
}

// Función de configuración 
void setup() {
  pinMode(MAS.PIN, INPUT_PULLDOWN);
  attachInterrupt(MAS.PIN, mas_isr, RISING);
  pinMode(MENOS.PIN, INPUT_PULLUP);
  attachInterrupt(MENOS.PIN, menos_isr, FALLING);
  pinMode(Led_1, OUTPUT);
  pinMode(Led_2, OUTPUT);
  pinMode(Led_3, OUTPUT);
  pinMode(Led_4, OUTPUT);
  digitalWrite(Led_1,LOW);
  digitalWrite(Led_2,LOW);
  digitalWrite(Led_3,LOW);
  digitalWrite(Led_4,LOW);

  pinMode(Led_5, OUTPUT);
  pinMode(Led_6, OUTPUT);
  pinMode(Led_7, OUTPUT);
  pinMode(Led_8, OUTPUT);
  pinMode(reinicio, PULLDOWN);

  timer = timerBegin(0, 80, true); // Timer 0, divisor de reloj 80
  timerAttachInterrupt(timer, &Temporizador, true); // Adjuntar la función de manejo de interrupción
  timerAlarmWrite(timer, 250000, true); // Interrupción cada 25ms
  timerAlarmEnable(timer);
}

// Loop principal
void loop() {
  if (MAS.pressed) {
    MAS.pressed = false;
    delay(200);
  }
  if (MENOS.pressed) {
    MENOS.pressed = false;
    delay(200);
  }
  if (reinicio == HIGH){
    sequenceIndex = 0;
}

// otras funciones
void mostrarBinario(uint8_t numero) {
  digitalWrite(Led_1, numero & 0x01);
  digitalWrite(Led_2, (numero >> 1) & 0x01);
  digitalWrite(Led_3, (numero >> 2) & 0x01);
  digitalWrite(Led_4, (numero >> 3) & 0x01);
}
